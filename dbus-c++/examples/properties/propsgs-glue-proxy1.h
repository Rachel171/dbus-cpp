
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__propsgs_glue_proxy1_h__PROXY_MARSHAL_H
#define __dbusxx__propsgs_glue_proxy1_h__PROXY_MARSHAL_H

#include <dbus-c++/dbus.h>

namespace hsae {
namespace protocol {
namespace interface {

class props_proxy
 : public ::DBus::InterfaceProxy
{
public:

    props_proxy()
    : ::DBus::InterfaceProxy("hsae.protocol.interface.props")
    {
        connect_signal(props_proxy, MessageChanged, _MessageChanged_stub);
        connect_signal(props_proxy, DataChanged, _DataChanged_stub);
    }

public:

    /* properties exported by this interface */
        const int32_t Version() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer(); 
            const std::string interface_name = "hsae.protocol.interface.props";
            const std::string property_name  = "Version";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout; 
            ri >> argout;
            return argout;
        };
        const std::string Message() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer(); 
            const std::string interface_name = "hsae.protocol.interface.props";
            const std::string property_name  = "Message";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout; 
            ri >> argout;
            return argout;
        };
        void Message( const std::string & input) {
            ::DBus::CallMessage call ;
             call.member("Set");  call.interface( "org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer(); 
            ::DBus::Variant value;
            ::DBus::MessageIter vi = value.writer ();
            vi << input;
            const std::string interface_name = "hsae.protocol.interface.props";
            const std::string property_name  = "Message";
            wi << interface_name;
            wi << property_name;
            wi << value;
            ::DBus::Message ret = this->invoke_method (call);
        };
        void Data( const double & input) {
            ::DBus::CallMessage call ;
             call.member("Set");  call.interface( "org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer(); 
            ::DBus::Variant value;
            ::DBus::MessageIter vi = value.writer ();
            vi << input;
            const std::string interface_name = "hsae.protocol.interface.props";
            const std::string property_name  = "Data";
            wi << interface_name;
            wi << property_name;
            wi << value;
            ::DBus::Message ret = this->invoke_method (call);
        };
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */

public:

    /* signal handlers for this interface
     */
    virtual void MessageChanged(const std::string& message) = 0;
    virtual void DataChanged(const double& Data) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _MessageChanged_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::string message; ri >> message;
        MessageChanged(message);
    }
    void _DataChanged_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        double Data; ri >> Data;
        DataChanged(Data);
    }
};

} } } 
#endif//__dbusxx__propsgs_glue_proxy1_h__PROXY_MARSHAL_H
