
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__EchoAdaptor_h__ADAPTOR_MARSHAL_H
#define __dbusxx__EchoAdaptor_h__ADAPTOR_MARSHAL_H

#include <dbus-c++/dbus.h>

namespace hsae {
namespace interface {
namespace mydbus {

class Echo_adaptor
: public ::DBus::InterfaceAdaptor
{
public:

    Echo_adaptor()
    : ::DBus::InterfaceAdaptor("hsae.interface.mydbus.Echo")
    {
        register_method(Echo_adaptor, Random, _Random_stub);
        register_method(Echo_adaptor, Hello, _Hello_stub);
        register_method(Echo_adaptor, Echo, _Echo_stub);
        register_method(Echo_adaptor, Cat, _Cat_stub);
        register_method(Echo_adaptor, Sum, _Sum_stub);
        register_method(Echo_adaptor, Info, _Info_stub);
        register_method(Echo_adaptor, myEcho, _myEcho_stub);
    }

    ::DBus::IntrospectedInterface *const introspect() const 
    {
        static ::DBus::IntrospectedArgument Random_args[] = 
        {
            { "version", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument Hello_args[] = 
        {
            { "name", "s", true },
            { "greeting", "s", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument Echo_args[] = 
        {
            { "input", "v", true },
            { "output", "v", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument Cat_args[] = 
        {
            { "file", "s", true },
            { "stream", "ay", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument Sum_args[] = 
        {
            { "ints", "ai", true },
            { 0, "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument Info_args[] = 
        {
            { "info", "a{ss}", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument myEcho_args[] = 
        {
            { "info", "a{ss}", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument Echoed_args[] = 
        {
            { "value", "v", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument MessageChanged_args[] = 
        {
            { "message", "s", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument DataChanged_args[] = 
        {
            { "Data", "d", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedMethod Echo_adaptor_methods[] = 
        {
            { "Random", Random_args },
            { "Hello", Hello_args },
            { "Echo", Echo_args },
            { "Cat", Cat_args },
            { "Sum", Sum_args },
            { "Info", Info_args },
            { "myEcho", myEcho_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedMethod Echo_adaptor_signals[] = 
        {
            { "Echoed", Echoed_args },
            { "MessageChanged", MessageChanged_args },
            { "DataChanged", DataChanged_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedProperty Echo_adaptor_properties[] = 
        {
            { 0, 0, 0, 0 }
        };
        static ::DBus::IntrospectedInterface Echo_adaptor_interface = 
        {
            "hsae.interface.mydbus.Echo",
            Echo_adaptor_methods,
            Echo_adaptor_signals,
            Echo_adaptor_properties
        };
        return &Echo_adaptor_interface;
    }

public:

    /* properties exposed by this interface, use
     * property() and property(value) to get and set a particular property
     */

public:

    /* methods exported by this interface,
     * you will have to implement them in your ObjectAdaptor
     */
    virtual int32_t Random() = 0;
    virtual std::string Hello(const std::string& name) = 0;
    virtual ::DBus::Variant Echo(const ::DBus::Variant& input) = 0;
    virtual std::vector< uint8_t > Cat(const std::string& file) = 0;
    virtual int32_t Sum(const std::vector< int32_t >& ints) = 0;
    virtual std::map< std::string, std::string > Info() = 0;
    virtual void myEcho(const std::map< std::string, std::string >& info) = 0;

public:

    /* signal emitters for this interface
     */
    void Echoed(const ::DBus::Variant& arg1)
    {
        ::DBus::SignalMessage sig("Echoed");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        emit_signal(sig);
    }
    void MessageChanged(const std::string& arg1)
    {
        ::DBus::SignalMessage sig("MessageChanged");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        emit_signal(sig);
    }
    void DataChanged(const double& arg1)
    {
        ::DBus::SignalMessage sig("DataChanged");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        emit_signal(sig);
    }

private:

    /* unmarshalers (to unpack the DBus message before calling the actual interface method)
     */
    ::DBus::Message _Random_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        int32_t argout1 = Random();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _Hello_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        std::string argout1 = Hello(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _Echo_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        ::DBus::Variant argin1; ri >> argin1;
        ::DBus::Variant argout1 = Echo(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _Cat_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        std::vector< uint8_t > argout1 = Cat(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _Sum_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< int32_t > argin1; ri >> argin1;
        int32_t argout1 = Sum(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _Info_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::map< std::string, std::string > argout1 = Info();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _myEcho_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::map< std::string, std::string > argin1; ri >> argin1;
        myEcho(argin1);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
};

} } } 
#endif//__dbusxx__EchoAdaptor_h__ADAPTOR_MARSHAL_H
